function sData = SA_calcCaData(sData,VelMin, IsDeconv, gol, subjectID, params) 
% use this function to process Ca-imaging data 

%%% recruiting Ca preprocessed data from ROIMANAGER: 
% msgbox('Open dff file');
% [~,filePath,~] = uigetfile('*.mat');

%%% SET PARAMETERS 
FigVisible = 'on'; % off or on. Does Matlab show the individual ROIs binned activity plots (on) or just generate and save them (off)? 
% VelMin = 0.01; % minimum velocity. Below this, Ca-activity will be discarded
nBin    = sData.behavior.meta.nBins;
nTrials = sData.behavior.wheelLapImaging;
% FrameRate = sData.behavior.meta.imagingSamplingRate;
sData.imdata.meta             = struct;
sData.imdata.binned           = struct;
sData.imdata.binned.VelMin    = VelMin;
sData.imdata.binned.rewardPos = gol;

%% LOAD DATA
% try
    multi_session_idx              = sData.imdata.roi_classification == 1;
%     dff = sData.imdata.roiSignals(2).newdff(multi_session_idx, :);
% catch
    dff = sData.imdata.roiSignals(2).newdff;
% end


% Deconvolved data
if IsDeconv == 1
    sData.imdata.roiSignals(2).deconv = sData.imdata.roiSignals(2).CiaDeconvolved(multi_session_idx, :);
end

[nROIs, nSamples]             = size(dff);
sData.imdata.roiSignals(2).ch = 'green';
sData.imdata.roiSignals(1).ch = 'red';
sData.imdata.nROIs            = nROIs;
sData.imdata.nSamples         = nSamples;

% saving folder
mkdir(sData.sessionInfo.savePath,'Imaging');
mkdir(strcat(sData.sessionInfo.savePath,'\Imaging'),'RoiAct');
mkdir(strcat(sData.sessionInfo.savePath,'\Imaging'),'RoiActBinned-dFF');
if IsDeconv > 0
    mkdir(strcat(sData.sessionInfo.savePath,'\Imaging'),'RoiActBinned-deconv');
end

%%% CONTROL. Compare frame signal in LV and number of frames in 2P recording:
if nSamples ~= sData.behavior.details.nFrames  
   msgbox(sprintf('Number of recorded by LV frames and imaged frames is not equal: %d vs %d',sData.behavior.details.nFrames,nSamples));
end
% set the smaller Sample-number for analysis
if nSamples >= sData.behavior.details.nFrames
   nSamples = sData.behavior.details.nFrames;
end

%%% PLOT TRANSIENTS
if strcmp(params.plot_activity_all_cells, 'yes')
    savePath = strcat(sData.sessionInfo.savePath,'\Imaging\RoiAct');
    
    % calculate lowpassed data for visulization
    % LIGHT filtering to see better fast transients
    dff_lowpassLight = NaN(nROIs,nSamples);
    d                = fdesign.lowpass('Fp,Fst,Ap,Ast',0.1,1,1,60); % Potential changes for stronger filtering: decrease Fp (0.01) and Fst (0.08). original stting: 0.1,1,1,60
    Hd               = design(d,'cheby1');   % or use 'equiripple' filter to have less amplitude filtering and more noise
    for i = 1:1:nROIs
        if multi_session_idx(i) == 1
            dff_lowpassLight(i,:) = filter(Hd, dff(i,1:nSamples)); 
        end
    end
    sData.imdata.roiSignals(2).dff_LPlight = single(dff_lowpassLight);
    
    
    %plot slightly filtered transients
    nROIOnFig = 10;
    plotdata = dff_lowpassLight(:,1:nSamples);
    % plot 10 ROIs to one fig
    plotMultipleROIdFFNormAbsDist(plotdata, sData.behavior.meta.imagingSamplingRate, nROIOnFig, sData.behavior.wheelPosDsMonIncr, sData.behavior.lickDs, savePath, 'NormROIsdFF-LPlight');
    
end


%% Filter DF/F signals for soma-GCaMP mice
if strcmp(subjectID, 'm6157') || strcmp(subjectID, 'm6159')
    dff = okada(dff,2);
end


%% CREATE A NEW MATRIX CONTAINING REAL (all) VELOCITY DATA , same size as SampleInBin Matrix
SampleInBinVelo = NaN(size(sData.behavior.binning.samplesInBinIndex));
% load matrix with velo data
for i = 1:1:(size(sData.behavior.binning.samplesInBinIndex,1))-1   % -1    find in which bin this sample is 
    SampleInBinVelo(i,sData.behavior.binning.samplesInBinIndex(i,:)==i) = sData.behavior.runSpeedDs(i); % replace sample index to velocity 
end

% CREATE MATRIX for Velo-limited data based on velocity limit (discarded data will be represented by -1)
SampleInBinLim = sData.behavior.binning.samplesInBinIndex; % CADATA.SampleInBinLim = CADATA.SampleInBin;
% substitute indexes with low velo data with -1 : 
SampleInBinLim(SampleInBinVelo < VelMin) = -1; % CADATA.SampleInBinLim(CADATA.SampleInBinVelo < VelMin) = -1;

% PUT SAMPLE INDEXES (Velo limited) into multi-dimension matrix. 1st dim: trials, then columns are bins, rows contain samples in that trial and bin. 
MaxSamplesinBin = max(sData.behavior.binning.samplesSpentInBin(:)); % how many rows needed maximum in matrix (what was max time (samples) spend in a bin)   , MaxSamplesinBin = max(CADATA.SampleSpentInBin(:));
for i = 1:1:nTrials
    MMSamplesLim{i} = NaN(MaxSamplesinBin, nBin); % for samples, creates i times a row-col matrices (row: max number of samples spent in a bin, column: Bin number)
    MMVelo{i}       = NaN(MaxSamplesinBin, nBin); % same for all Velo data (wo limitation)
    MMVeloLim{i}    = NaN(MaxSamplesinBin, nBin); % same for limited Velo data
end
% FILL UP MATRICES + Calculate average velocity within a bin and put into  CADATA.VeloInBin and CADATA.VeloLimInBin matrix
sData.imdata.VeloInBin    = NaN(nTrials-1, nBin); % mean real velo
sData.imdata.VeloLimInBin = NaN(nTrials-1, nBin); % mean limited velo

for i = 1:nTrials-1
   for j = 1:nBin
      SampleInd = sData.behavior.binning.enterIntoBinIndex(i,j); % get sample index when enter into a bin  % SampleInd = CADATA.EnterIntoBinSampleInd(i,j); 
      if isnan(SampleInd)
         break 
      end
      SpentInBin = sData.behavior.binning.leaveBinIndex(i,j) - sData.behavior.binning.enterIntoBinIndex(i,j)+ 1 ; % get how many samples spent in that bin  % SpentInBin = CADATA.SampleSpentInBin(i,j);
      for k = 1:SpentInBin
          if SampleInBinLim(SampleInd+k-1,j) > 0 % limited values were set to -1, I do not want to contain them
             MMSamplesLim{i}(k,j) = SampleInd + k - 1; % limited samples
             MMVeloLim{i}(k,j)    = SampleInBinVelo((SampleInd+k-1),j); % use only limited velo data  % CADATA.MMVeloLim{i}(k,j) = CADATA.SampleInBinVelo((SampleInd+k-1),j);
          end
          MMVelo{i}(k,j) = SampleInBinVelo((SampleInd+k-1),j); % use all velo data  % CADATA.MMVelo{i}(k,j) = CADATA.SampleInBinVelo((SampleInd+k-1),j); 
      end
      sData.imdata.VeloLimInBin(i,j) = mean(MMVeloLim{i}(:,j), 'omitnan'); % mean of limited velo
      sData.imdata.VeloInBin(i,j)    = mean(MMVelo{i}(:,j), 'omitnan');  % mean of real velo
   end
end

%if IsDeconv >= 1
%    sData = cumSpikes(sData);
%    sData = ifreqDeconvN(sData);
%end

% CREATE A NEW MATRIX FOR Ca-data WHERE ALL DATA IN A BIN WITHIN A TRIAL IS REPRESENTED BY ONE CELL/NUMBER. CA-DFF DATA WILL BE AVERAGED WITHIN ONE BIN/ONE TRIAL (USING DATAPOINTS WHERE SPEED IS HIGHER THAN SET)
for i = 1:nROIs
    sData.imdata.binned.RoidFF{i} = NaN(nTrials,nBin); 
    if IsDeconv >= 1
        sData.imdata.binned.RoiDeconvolved{i} = NaN(nTrials,nBin);
        sData.imdata.binned.RoicumSpikes{i} = NaN(nTrials,nBin); 
        sData.imdata.binned.RoiiFreq{i} = NaN(nTrials,nBin); 
    end
end

% load matrices with data in trial and bins
for i = 1:nROIs  
    if multi_session_idx(i) == 1
        for j = 1:nTrials-1
            for k = 1:nBin
                SampleInd = sData.behavior.binning.enterIntoBinIndex(j,k); % get sample index when enter into a bin
                if isnan(SampleInd) % if recording ends in LV stop calculation
                   break 
                end
                SpentInBin = sData.behavior.binning.leaveBinIndex(j,k) - sData.behavior.binning.enterIntoBinIndex(j,k) + 1; % get how many samples spent in that bin
                dFFInBin   = NaN(MaxSamplesinBin,1); % temporary array to calcuate mean Ca-value in a bin during time spent in a bin (> velo lim)
                if IsDeconv >= 1
                    DeconvInBin = NaN(MaxSamplesinBin,1);
    %                 iFreqInBin = NaN(MaxSamplesinBin,1);
    %                 SpikeInBin = NaN(MaxSamplesinBin,1);
                end
                for m = 1:1:SpentInBin
                    if SampleInd+m > nSamples % if recording ends in SciScan stop calculation (sometimes not the same size data in SciScan and LV)
                        break
                    end
                    if SampleInBinLim(SampleInd+m-1,k) > 0 % limited values were set to -1, I do not want to contain them
                       dFFInBin(m) = dff(i,(SampleInd+m-1)); % dFF
                       if IsDeconv >= 1
                          DeconvInBin(m) = sData.imdata.roiSignals(2).deconv(i,(SampleInd+m-1)); % deconv 
    %                       SpikeInBin(m) = sData.imdata.roiSignals(2).cumSpikes(i,(SampleInd+m-1)); % spike rate
    %                       iFreqInBin(m) = sData.imdata.roiSignals(2).iFrequency(i,(SampleInd+m-1)); % 
                       end
                    end
                end
                sData.imdata.binned.RoidFF{i}(j,k) = mean(dFFInBin, 'omitnan'); % mean of Ca data within a bin witihn a trial
                if IsDeconv >= 1
                    sData.imdata.binned.RoiDeconvolved{i}(j,k) = mean(DeconvInBin, 'omitnan'); % mean deconvolved Ca data 
    %                 sData.imdata.binned.RoicumSpikes{i}(j,k) = nanmean(SpikeInBin); % mean spike rate of Ca data 
    %                 sData.imdata.binned.RoiiFreq{i}(j,k) = nanmean(iFreqInBin);
                end
            end
        end
    end

end

% calculate ROIstats
tic;
roiStat                   = SA_getRoiActivityStats(dff); % using channel 1 or 2
roiStat.meanPeakDff       = mean(roiStat.peakDff, 'omitnan');
roiStat.stdPeakDff        = std(roiStat.peakDff, 'omitnan');
roiStat.meanSignalToNoise = mean(roiStat.signalToNoise, 'omitnan');
roiStat.stdSsignalToNoise = std(roiStat.signalToNoise, 'omitnan');
roiStat.meanActivityLevel = mean(roiStat.activityLevel, 'omitnan');
roiStat.stdActivityLevel  = std(roiStat.activityLevel, 'omitnan');
sData.imdata.roiStat      = roiStat;
toc;

%%  Calculate and plot motion correction vectors for each bin
% sData = SA_motionCorrVector(sData,filePath,savePath);

% landmark positions: 
if gol == 5
    % landmark setting: sandpaper, hot glue, hot glue, sandpaper
    C1A = 25; C1B = 27; % start, end position
    C2A = 45; C2B = 47;
    C3A = 67; C3B = 69;
    C4A = 86; C4B = 88;
end

sData.imdata.cues.C1A = C1A;
sData.imdata.cues.C1B = C1B;
sData.imdata.cues.C2A = C2A;
sData.imdata.cues.C2B = C2B;
sData.imdata.cues.C3A = C3A;
sData.imdata.cues.C3B = C3B;
sData.imdata.cues.C4A = C4A;
sData.imdata.cues.C4B = C4B;

nTrials = sData.behavior.wheelLapImaging;
nBins   = sData.behavior.meta.nBins;

% PLOT indivudual ROIs binned activity (heat map)

%% plot binned dF/F 
savePath   = strcat(sData.sessionInfo.savePath,'\Imaging\RoiActBinned-dFF'); 
MeanRoiAct = NaN(nROIs,nBins);

for roi = 1:nROIs 
    
    if multi_session_idx(i) == 1

        MeanRoiAct(roi,1:nBins)= mean(sData.imdata.binned.RoidFF{roi},1, 'omitnan');
        fprintf('\n Calculating for ROI # %d', roi)
        if(any(isnan(MeanRoiAct(roi,1:nBins))))
           continue 
        end
        SA_plotHeatBinCa(sData.imdata.binned.RoidFF{roi},sData.sessionInfo.sessionID,roi,'dF/F',sData.behavior.meta.binSize,sData.behavior.meta.nBins,nTrials,FigVisible); 
        hold on
        line([C1A C1A],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on; line([C1B C1B],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on;
        line([C2A C2A],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C2B C2B],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
        line([C3A C3A],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C3B C3B],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
        line([C4A C4A],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on; line([C4B C4B],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on;
        fname = strcat(sData.sessionInfo.sessionID,'-roi',num2str(roi),'-dff');
    
        x_axis = (sData.behavior.meta.binSize/2:sData.behavior.meta.binSize:sData.behavior.meta.binSize*nBins);
        y_data = mean(sData.imdata.binned.RoidFF{roi},1, 'omitnan')+nTrials;
        y_data_scaled = (y_data - min(y_data))/(max(y_data)-min(y_data));
        new_min = nTrials;
        new_max = nTrials-20;
        y_data_scaled = nTrials + y_data_scaled*(new_max-new_min);
    
        plot(x_axis, y_data_scaled,'color', 'w','LineWidth',2)
        xlabel('Position on Wheel (cm)'); 
        ax = gca; 
        ax.TickDir = 'out';
        xticks([0,50,100,150]);
        ylabel('Position tuning of activity');
    
        % Save figures
        savefig(fullfile(savePath,fname));
        saveas(gcf,(fullfile(savePath,[fname '.jpg'])));
        close(3)
    end

end
% close all;
sData.imdata.binned.MeanRoiAct = MeanRoiAct;

% mean signal RoiActBinned
savePath = strcat(sData.sessionInfo.savePath,'\Imaging\RoiAct');
figure('Color','white');
x_axis = sData.behavior.meta.binSize:sData.behavior.meta.binSize:sData.behavior.meta.binSize*nBins;
sData.imdata.binned.MeanMeanRoiAct = mean(sData.imdata.binned.MeanRoiAct, 'omitnan');
Ymax = (max(sData.imdata.binned.MeanMeanRoiAct(1,:)))*1.1;
Ymin = (min(sData.imdata.binned.MeanMeanRoiAct(1,:)))*0.9;
plot(x_axis,sData.imdata.binned.MeanMeanRoiAct(1,1:nBins),'LineWidth',2)
line([C1A C1A],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on; line([C1B C1B],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on;
line([C2A C2A],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C2B C2B],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
line([C3A C3A],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C3B C3B],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
line([C4A C4A],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on; line([C4B C4B],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on;
axis([0 160 Ymin Ymax]); % ceil(Ymax)
title(strcat(sData.sessionInfo.sessionID,' Mean of all ROIs'));
xlabel('Position on Wheel (cm)'); ax = gca; ax.TickDir = 'out'; xticks([0,50,100,150]);
ylabel('Position tuning of activity');
fname = strcat(sData.sessionInfo.sessionID,'AllRois-pos-tuning-dff');

% Save fig
% savefig(fullfile(savePath,fname));
% saveas(gcf,(fullfile(savePath,[fname '.jpg'])));


if IsDeconv > 0
    %%% binned deconvolved signal
    savePath = strcat(sData.sessionInfo.savePath,'\Imaging\RoiActBinned-deconv'); 
    MeanRoiAct = NaN(nROIs,nBins);
    for roi = 1:nROIs 

        if multi_session_idx(i) == 1

            MeanRoiAct(roi,1:nBins)= nanmean(sData.imdata.binned.RoiDeconvolved{roi},1);
       
            SA_plotHeatBinCa(sData.imdata.binned.RoiDeconvolved{roi},sData.sessionInfo.sessionID,roi,'deconv',sData.behavior.meta.binSize,sData.behavior.meta.nBins,nTrials,FigVisible); 
            caxis([0 inf]); hold on;
            line([C1A C1A],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on; line([C1B C1B],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on;
            line([C2A C2A],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C2B C2B],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
            line([C3A C3A],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C3B C3B],[0 nTrials],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
            line([C4A C4A],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on; line([C4B C4B],[0 nTrials],'Color','white','LineStyle','--','LineWidth',2); hold on;
            fname = strcat(sData.sessionInfo.sessionID,'-roi',num2str(roi),'-deconv');
            savefig(fullfile(savePath,fname));
            saveas(gcf,(fullfile(savePath,[fname '.jpg'])));
    
            figure('Color','white','visible',FigVisible')
            x_axis = sData.behavior.meta.binSize:sData.behavior.meta.binSize:sData.behavior.meta.binSize*nBins;
            Ymax = (max(MeanRoiAct(roi,:)))+0.0001;
            plot(x_axis,MeanRoiAct(roi,1:nBins),'LineWidth',2)
            line([C1A C1A],[0 Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on; line([C1B C1B],[0 Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on;
            line([C2A C2A],[0 Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C2B C2B],[0 Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
            line([C3A C3A],[0 Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C3B C3B],[0 Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
            line([C4A C4A],[0 Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on; line([C4B C4B],[0 Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on;
            axis([0 160 0 Ymax]); % ceil(Ymax)
            title(strcat(sData.sessionInfo.sessionID,' ROI #',num2str(roi)));
            xlabel('Position on Wheel (cm)'); ax = gca; ax.TickDir = 'out'; xticks([0,50,100,150]);
            ylabel('Position tuning of activity');
            fname = strcat(sData.sessionInfo.sessionID,'-roi',num2str(roi),'-pos-tuning-deconv');
    
            % Save figures
            savefig(fullfile(savePath,fname));
            saveas(gcf,(fullfile(savePath,[fname '.jpg'])));
            %}
        end
    end
    close all;
    sData.imdata.binned.MeanRoiAct_Deconv = MeanRoiAct;
    
    % mean pos tuning - deconv - NOT smoothed
    figure();
    x_axis = sData.behavior.meta.binSize:sData.behavior.meta.binSize:sData.behavior.meta.binSize*nBins;
    Ymax = (max(mean(MeanRoiAct)))*1.1+0.0001;
    Ymin = (min(mean(MeanRoiAct)))*0.9;
    plot(x_axis,mean(MeanRoiAct),'LineWidth',2)
    line([C1A C1A],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on; line([C1B C1B],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on;
    line([C2A C2A],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C2B C2B],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
    line([C3A C3A],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on; line([C3B C3B],[Ymin Ymax],'Color',[1 0.3 0.5],'LineStyle','--','LineWidth',2); hold on;
    line([C4A C4A],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on; line([C4B C4B],[Ymin Ymax],'Color','black','LineStyle','--','LineWidth',2); hold on;
    axis([0 160 Ymin Ymax]); % ceil(Ymax)
    title(strcat(sData.sessionInfo.sessionID,' Mean of all ROIs - deconv'));
    xlabel('Position on Wheel (cm)'); ax = gca; ax.TickDir = 'out'; xticks([0,50,100,150]);
    ylabel('Position tuning of activity');
    fname = strcat(sData.sessionInfo.sessionID,'AllRois-pos-tuning-deconv');

    % Save figures
    savefig(fullfile(savePath,fname));
    saveas(gcf,(fullfile(savePath,[fname '.jpg'])));
   %}
end


% Save file to same path where other files can be found 
% save(fullfile(sData.sessionInfo.savePath(1:54),...
%     strcat(sData.sessionInfo.sessionID(1:14), sData.sessionInfo.sessionID(25:28),'.mat')),'sData');

% save(fullfile(sData.sessionInfo.savePath(1:54),...
%     strcat(sData.sessionInfo.sessionID,'.mat')),'sData');
end

